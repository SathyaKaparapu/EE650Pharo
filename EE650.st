Object subclass: #CRCCard	instanceVariableNames: 'className responsibilities collaborators'	classVariableNames: ''	package: 'EE650'!!CRCCard methodsFor: 'initialization' stamp: '4/12/2025 16:24'!initialize    super initialize.    responsibilities := OrderedCollection new.    collaborators := OrderedCollection new.! !!CRCCard methodsFor: 'introspection' stamp: '4/12/2025 16:24'!className    ^ className! !!CRCCard methodsFor: 'accessing' stamp: '4/12/2025 16:24'!className: aString    className := aString! !!CRCCard methodsFor: 'accessing' stamp: '4/12/2025 16:24'!responsibilities    ^ responsibilities! !!CRCCard methodsFor: 'accessing' stamp: '4/12/2025 16:25'!collaborators    ^ collaborators! !!CRCCard methodsFor: 'adding' stamp: '4/12/2025 16:25'!addResponsibility: aString    responsibilities add: aString! !!CRCCard methodsFor: 'adding' stamp: '4/12/2025 16:25'!addCollaborator: aString    collaborators add: aString! !Object subclass: #UserManager	instanceVariableNames: 'users otps'	classVariableNames: ''	package: 'EE650'!!UserManager methodsFor: 'initialization' stamp: '4/12/2025 17:15'!initialize    super initialize.    users := Dictionary new.    otps := Dictionary new.! !!UserManager methodsFor: 'adding' stamp: '4/12/2025 17:01'!addUser: aUsername password: aPassword    users at: aUsername put: (SHA256 new hashMessage: aPassword) hex! !!UserManager methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:01'!userExists: aUsername    ^ users includesKey: aUsername! !!UserManager methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:01'!getPasswordFor: aUsername    ^ users at: aUsername ifAbsent: [ nil ]! !!UserManager methodsFor: 'MFA' stamp: '4/12/2025 17:17'!generateOTPFor: aUsername    | otp |    otp := (100000 to: 999999) atRandom asString.    otps at: aUsername put: otp.    ^ otp! !!UserManager methodsFor: 'MFA' stamp: '4/12/2025 17:17'!verifyOTP: anOTP for: aUsername    | storedOTP |    storedOTP := otps at: aUsername ifAbsent: [ ^ false ].    ^ storedOTP = anOTP! !!UserManager methodsFor: 'MFA' stamp: '4/12/2025 17:17'!clearOTPFor: aUsername    otps removeKey: aUsername ifAbsent: [  ]! !Object subclass: #StoryCard	instanceVariableNames: 'storyNumber title pph tasks status'	classVariableNames: ''	package: 'EE650'!!StoryCard methodsFor: 'initialization' stamp: '4/12/2025 16:19'!initialize    super initialize.    tasks := OrderedCollection new.    status := 'Not Started'.! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:19'!storyNumber    ^ storyNumber! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:19'!storyNumber: aNumber    storyNumber := aNumber! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:19'!title    ^ title! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!title: aString    title := aString! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!pph    ^ pph! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!pph: aNumber    pph := aNumber! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!tasks    ^ tasks! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!status    ^ status! !!StoryCard methodsFor: 'accessing' stamp: '4/12/2025 16:20'!status: aString    status := aString! !!StoryCard methodsFor: 'adding' stamp: '4/12/2025 16:20'!addTask: aTaskCard    tasks add: aTaskCard! !Object subclass: #WorkCard	instanceVariableNames: 'pairNumber hours'	classVariableNames: ''	package: 'EE650'!!WorkCard methodsFor: 'accessing' stamp: '4/12/2025 16:23'!pairNumber    ^ pairNumber! !!WorkCard methodsFor: 'accessing' stamp: '4/12/2025 16:23'!pairNumber: aNumber    pairNumber := aNumber! !!WorkCard methodsFor: 'accessing' stamp: '4/12/2025 16:23'!hours    ^ hours! !!WorkCard methodsFor: 'accessing' stamp: '4/12/2025 16:23'!hours: aNumber    hours := aNumber! !!WorkCard methodsFor: 'printing' stamp: '4/12/2025 17:09'!printString    ^ 'WorkCard(Pair: ', pairNumber asString, ', Hours: ', hours asString, ')'! !Object subclass: #IterationCard	instanceVariableNames: 'iterationNumber stories totalPPH'	classVariableNames: ''	package: 'EE650'!!IterationCard methodsFor: 'initialization' stamp: '4/12/2025 16:26'!initialize    super initialize.    stories := OrderedCollection new.    totalPPH := 0.! !!IterationCard methodsFor: 'accessing' stamp: '4/12/2025 16:27'!iterationNumber    ^ iterationNumber! !!IterationCard methodsFor: 'accessing' stamp: '4/12/2025 16:27'!iterationNumber: aNumber    iterationNumber := aNumber! !!IterationCard methodsFor: 'accessing' stamp: '4/12/2025 16:37'!stories    ^ stories! !!IterationCard methodsFor: 'accessing' stamp: '4/12/2025 16:37'!totalPPH    ^ totalPPH! !!IterationCard methodsFor: 'adding' stamp: '4/12/2025 16:37'!addStory: aStoryCard    stories add: aStoryCard.    totalPPH := totalPPH + aStoryCard pph.! !Object subclass: #User	instanceVariableNames: 'username password'	classVariableNames: ''	package: 'EE650'!!User methodsFor: 'accessing' stamp: '4/12/2025 16:53'!username    ^ username! !!User methodsFor: 'accessing' stamp: '4/12/2025 16:53'!username: aString    username := aString! !!User methodsFor: 'accessing' stamp: '4/12/2025 16:53'!password    ^ password! !!User methodsFor: 'accessing' stamp: '4/12/2025 16:53'!password: aString    password := aString! !Object subclass: #AuthService	instanceVariableNames: 'userManager pendingMFA'	classVariableNames: ''	package: 'EE650'!!AuthService methodsFor: 'initialization' stamp: '4/12/2025 17:18'!initialize    super initialize.    userManager := UserManager new.    pendingMFA := Set new.! !!AuthService methodsFor: 'accessing' stamp: '4/12/2025 17:02'!userManager    ^ userManager! !!AuthService methodsFor: 'accessing' stamp: '4/12/2025 17:02'!userManager: aUserManager    userManager := aUserManager! !!AuthService methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:04'!registerUser: aUsername password: aPassword    userManager addUser: aUsername password: aPassword! !!AuthService methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:18'!loginWithUsername: aUsername password: aPassword    | storedPassword hashedInput |    storedPassword := userManager getPasswordFor: aUsername.    hashedInput := (SHA256 new hashMessage: aPassword) hex.    (storedPassword isNotNil and: [ storedPassword = hashedInput ])        ifTrue: [             pendingMFA add: aUsername.            ^ userManager generateOTPFor: aUsername ]        ifFalse: [ ^ nil ].! !!AuthService methodsFor: 'MFA' stamp: '4/12/2025 17:18'!verifyOTP: anOTP for: aUsername    | isValid |    (pendingMFA includes: aUsername) ifFalse: [ ^ false ].    isValid := userManager verifyOTP: anOTP for: aUsername.    isValid ifTrue: [         userManager clearOTPFor: aUsername.        pendingMFA remove: aUsername ifAbsent: [  ] ].    ^ isValid! !SpPresenter subclass: #LoginForm	instanceVariableNames: 'authService usernameInput passwordInput loginButton otpInput verifyButton statusLabel'	classVariableNames: ''	package: 'EE650'!!LoginForm methodsFor: 'initialization' stamp: '4/12/2025 17:19'!initialize    super initialize.    authService := AuthService new.! !!LoginForm methodsFor: 'initialization' stamp: '4/12/2025 17:19'!initializePresenters    usernameInput := self newTextInput.    passwordInput := self newTextInput.    loginButton := self newButton        label: 'Login';        action: [ self handleLogin ].    otpInput := self newTextInput        enabled: false.    verifyButton := self newButton        label: 'Verify OTP';        enabled: false;        action: [ self handleVerifyOTP ].    statusLabel := self newLabel        label: 'Please enter your credentials.'.! !!LoginForm methodsFor: 'specs' stamp: '4/12/2025 17:19'!defaultSpec    ^ SpBoxLayout newTopToBottom        add: (SpBoxLayout newLeftToRight            add: 'Username: ' expand: false;            add: #usernameInput;            yourself)        expand: false;        add: (SpBoxLayout newLeftToRight            add: 'Password: ' expand: false;            add: #passwordInput;            yourself)        expand: false;        add: #loginButton expand: false;        add: (SpBoxLayout newLeftToRight            add: 'OTP: ' expand: false;            add: #otpInput;            yourself)        expand: false;        add: #verifyButton expand: false;        add: #statusLabel expand: false;        yourself! !!LoginForm methodsFor: 'accessing' stamp: '4/12/2025 17:24'!authService    ^ authService! !!LoginForm methodsFor: 'accessing' stamp: '4/12/2025 17:24'!authService: anAuthService    authService := anAuthService! !!LoginForm methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:24'!handleLogin    | username password otp |    username := usernameInput text.    password := passwordInput text.    (username isEmpty or: [ password isEmpty ])        ifTrue: [             statusLabel label: 'Please enter both username and password.'.            ^ self ].    otp := authService loginWithUsername: username password: password.    otp ifNil: [         statusLabel label: 'Login failed. Check your credentials.'.        ^ self ].    statusLabel label: 'Login successful!! Please enter the OTP.'.    otpInput enabled: true.    verifyButton enabled: true.    loginButton enabled: false.    usernameInput enabled: false.    passwordInput enabled: false.! !!LoginForm methodsFor: 'as yet unclassified' stamp: '4/12/2025 17:24'!handleVerifyOTP    | username otp isValid |    username := usernameInput text.    otp := otpInput text.    otp isEmpty        ifTrue: [             statusLabel label: 'Please enter the OTP.'.            ^ self ].    isValid := authService verifyOTP: otp for: username.    isValid        ifTrue: [             statusLabel label: 'MFA successful!! You are logged in.'.            otpInput enabled: false.            verifyButton enabled: false ]        ifFalse: [             statusLabel label: 'MFA failed!! Invalid OTP.'.            otpInput text: '' ].! !Object subclass: #TaskCard	instanceVariableNames: 'taskNumber description'	classVariableNames: ''	package: 'EE650'!!TaskCard methodsFor: 'accessing' stamp: '4/12/2025 16:22'!taskNumber    ^ taskNumber! !!TaskCard methodsFor: 'accessing' stamp: '4/12/2025 16:22'!taskNumber: aNumber    taskNumber := aNumber! !!TaskCard methodsFor: 'accessing' stamp: '4/12/2025 16:22'!description    ^ description! !!TaskCard methodsFor: 'accessing' stamp: '4/12/2025 16:22'!description: aString    description := aString! !