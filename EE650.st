Object subclass: #EE650Project	instanceVariableNames: 'storyCards taskCards workCards iterationCards crcCards'	classVariableNames: ''	package: 'EE650'!!EE650Project methodsFor: 'initialization' stamp: '4/20/2025 11:32'!initialize    storyCards := OrderedCollection new.    taskCards := OrderedCollection new.    workCards := OrderedCollection new.    iterationCards := OrderedCollection new.    crcCards := OrderedCollection new.! !!EE650Project methodsFor: 'adding' stamp: '4/20/2025 11:07'!addStoryCard: aStoryCard    storyCards add: aStoryCard.! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 11:16'!listStoryTitles    ^ storyCards collect: [ :card | card title ].! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 11:31'!storyCards    ^ storyCards.! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 11:32'!storyCards: aCollection    storyCards := aCollection.! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:15'!taskCards    ^ taskCards! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:15'!addTaskCard: aTaskCard    taskCards ifNil: [taskCards := OrderedCollection new].    taskCards add: aTaskCard.! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:16'!workCards    ^ workCards! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:16'!addWorkCard: aWorkCard    workCards ifNil: [workCards := OrderedCollection new].    workCards add: aWorkCard.! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:16'!crcCards    ^ crcCards! !!EE650Project methodsFor: 'accessing' stamp: '4/20/2025 16:16'!addCRCCard: aCRCCard    crcCards ifNil: [crcCards := OrderedCollection new].    crcCards add: aCRCCard.! !!EE650Project methodsFor: 'accessing' stamp: '4/21/2025 12:38'!iterationCards    ^ iterationCards! !!EE650Project methodsFor: 'accessing' stamp: '4/21/2025 12:38'!addIterationCard: aCard    iterationCards add: aCard.! !Object subclass: #JQueryLibrary	instanceVariableNames: ''	classVariableNames: ''	package: 'EE650'!Object subclass: #MFA	instanceVariableNames: 'otpCode expirySeconds createdAt'	classVariableNames: ''	package: 'EE650'!!MFA methodsFor: 'accessing' stamp: '4/21/2025 16:15'!otpCode    ^ otpCode.! !!MFA methodsFor: 'accessing' stamp: '4/21/2025 16:14'!otpCode: aString    otpCode := aString.! !!MFA methodsFor: 'accessing' stamp: '4/21/2025 16:15'!expirySeconds    ^ expirySeconds.! !!MFA methodsFor: 'accessing' stamp: '4/21/2025 16:14'!expirySeconds: aNumber    expirySeconds := aNumber.! !!MFA methodsFor: 'accessing' stamp: '4/23/2025 11:22'!createdAt ^ createdAt! !!MFA methodsFor: 'accessing' stamp: '4/23/2025 11:22'!createdAt: aTime createdAt := aTime! !!MFA methodsFor: 'accessing' stamp: '4/23/2025 11:22'!isExpired   ^ (Time now - createdAt) asSeconds > expirySeconds! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MFA class	instanceVariableNames: ''!!MFA class methodsFor: 'as yet unclassified' stamp: '4/21/2025 18:31'!generateDefaultOTP ^ self new otpCode: '123456'; expirySeconds: 60; yourself! !Object subclass: #WorkCard	instanceVariableNames: 'workId status progress taskCard actualHours'	classVariableNames: ''	package: 'EE650'!!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!workId    ^ workId.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!workId: aValue    workId := aValue.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!status    ^ status.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:04'!status: aString    status := aString.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:04'!progress    ^ progress.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:04'!progress: aString    progress := aString.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:04'!taskCard    ^ taskCard.! !!WorkCard methodsFor: 'accessing' stamp: '4/20/2025 11:04'!taskCard: aTaskCard    taskCard := aTaskCard.! !!WorkCard methodsFor: 'accessing'!actualHours   ^actualHours! !!WorkCard methodsFor: 'accessing'!actualHours: aNumber   actualHours := aNumber.! !WAComponent subclass: #LoginPageComponent	instanceVariableNames: 'username password session errorMessage otpInput otpGenerated otpExpiryTime isAuthenticated otpCode sessionOtp sessionOtpExpiry'	classVariableNames: ''	package: 'EE650'!!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!username ^username! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!username: aString username := aString! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!password ^password! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!password: aString password := aString! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!session ^session! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!session: aSession session := aSession! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!errorMessage ^errorMessage! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/21/2025 18:14'!errorMessage: aString errorMessage := aString! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/23/2025 12:20'!verifyOtp    (self session isExpired)        ifTrue: [            self errorMessage: 'OTP expired. Please login again.'.            self session: nil.        ]        ifFalse: [            (self otpCode = self session otpCode)                ifTrue: [                    self call: EE650ProjectComponent new.                ]                ifFalse: [                    self errorMessage: 'Incorrect OTP. Try again.'.                ].        ].! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:08'!sessionOtp    ^ sessionOtp! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:08'!sessionOtp: aValue    sessionOtp := aValue! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:08'!sessionOtpExpiry    ^ sessionOtpExpiry! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:08'!sessionOtpExpiry: aValue    sessionOtpExpiry := aValue! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:20'!isAuthenticated: aBoolean    isAuthenticated := aBoolean.! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:28'!otpCode    ^ otpCode.! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:28'!otpCode: aString    otpCode := aString.! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:48'!otpGenerated   ^ otpGenerated! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:48'!otpExpiryTime   ^ otpExpiryTime! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:48'!otpInput   ^ otpInput! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:49'!isAuthenticated   ^ isAuthenticated! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 13:49'!otpGenerated: aValue   otpGenerated := aValue.! !!LoginPageComponent methodsFor: 'accessing' stamp: '4/27/2025 14:35'!otpInput: aString    otpInput := aString.! !!LoginPageComponent methodsFor: 'actions' stamp: '4/27/2025 14:39'!login    (self sessionOtp notNil and: [ self sessionOtpExpiry notNil ])         ifTrue: [            "OTP Verification Step"            (self otpInput = self sessionOtp)                 ifTrue: [                    (DateAndTime now <= self sessionOtpExpiry)                         ifTrue: [                            self isAuthenticated: true.                            self sessionOtp: nil.                            self sessionOtpExpiry: nil.                            self otpGenerated: nil.                            self errorMessage: nil.                            self call: EE650ProjectComponent new.                        ]                         ifFalse: [                            self errorMessage: 'OTP expired. Please login again.'.                            self otpGenerated: nil. "Reset to restart flow"                        ].                ]                 ifFalse: [                    self errorMessage: 'Invalid OTP. Please try again.'.                ].        ]    ifFalse: [        "Initial Username and Password Check"        (self username = 'username' and: [ self password = 'correctpass' ])             ifTrue: [                | randomValue generatedOTP now |                now := DateAndTime now.                randomValue := (Random new next) * 900000.                generatedOTP := (100000 + randomValue truncated) asString.                self otpGenerated: generatedOTP.                self sessionOtp: generatedOTP.                self sessionOtpExpiry: now + (Duration minutes: 2).                self errorMessage: 'OTP sent!! Please enter OTP: ', generatedOTP.            ]             ifFalse: [                self errorMessage: 'Invalid username or password.'.            ].    ].! !!LoginPageComponent methodsFor: 'actions' stamp: '4/27/2025 12:10'!logout    self session removeKey: #authenticated.    self requestContext redirectTo: LoginPageComponent new.! !!LoginPageComponent methodsFor: 'rendering' stamp: '4/27/2025 13:58'!renderContentOn: html    html tag: 'style' with: '        .loginForm {            width: 350px;            margin: 60px auto;            font-family: sans-serif;            padding: 20px;            border: 1px solid #ccc;            border-radius: 10px;            box-shadow: 3px 3px 10px #ccc;            background-color: #f9f9f9;        }        .formGroup {            margin-bottom: 15px;        }        .formGroup label {            display: block;            margin-bottom: 5px;            font-weight: bold;        }        .formGroup input {            width: 100%;            padding: 8px;            box-sizing: border-box;        }        .error {            color: red;            margin-top: 10px;            text-align: center;            font-size: 10pt;        }        .submitButton {            width: 100%;            background-color: #4285F4;            color: white;            padding: 10px;            border: none;            border-radius: 5px;            font-size: 14pt;            margin-top: 10px;        }    '.    html div class: 'loginForm'; with: [        html heading level: 1; with: 'Login Page'.        html form: [            (self otpGenerated isNil) ifTrue: [                "Show Username and Password only"                html div class: 'formGroup'; with: [                    html label: 'Username:'.                    html textInput on: #username of: self.                ].                html div class: 'formGroup'; with: [                    html label: 'Password:'.                    html passwordInput on: #password of: self.                ].            ].            (self otpGenerated notNil) ifTrue: [                "Show OTP Input only"                html div class: 'formGroup'; with: [                    html label: 'Enter OTP:'.                    html textInput on: #otpInput of: self.                ].            ].            html div class: 'formGroup'; with: [                html submitButton                    class: 'submitButton';                    callback: [ self login ];                    value: (self otpGenerated isNil ifTrue: ['Login'] ifFalse: ['Verify OTP']).            ].            self errorMessage ifNotNil: [                html div class: 'error'; with: self errorMessage            ].        ].    ].! !!LoginPageComponent methodsFor: 'initialization' stamp: '4/27/2025 12:08'!initialize    super initialize.    isAuthenticated := false.	 username := ''.    password := ''.    otpInput := ''.    errorMessage := ''.! !!LoginPageComponent methodsFor: 'as yet unclassified' stamp: '4/27/2025 12:10'!otpStillValid    otpExpiryTime notNil and: [ Time now <= otpExpiryTime ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginPageComponent class	instanceVariableNames: ''!!LoginPageComponent class methodsFor: 'class initialization' stamp: '4/23/2025 12:23'!initialize    WAAdmin register: self asApplicationAt: 'ee650'.! !Object subclass: #User	instanceVariableNames: 'username password loginAttempts'	classVariableNames: ''	package: 'EE650'!!User methodsFor: 'initialization' stamp: '4/21/2025 16:11'!initialize    super initialize.    loginAttempts := OrderedCollection new.! !!User methodsFor: 'initialization' stamp: '4/21/2025 14:31'!addLoginAttempt: aLoginAttempt    loginAttempts add: aLoginAttempt.! !!User methodsFor: 'initialization' stamp: '4/21/2025 14:31'!loginAttempts    ^ loginAttempts! !!User methodsFor: 'accessing' stamp: '4/21/2025 15:14'!username    ^ username! !!User methodsFor: 'accessing' stamp: '4/21/2025 15:15'!username: aString    username := aString.! !!User methodsFor: 'accessing' stamp: '4/21/2025 15:15'!password    ^ password! !!User methodsFor: 'accessing' stamp: '4/21/2025 15:15'!password: aString    password := aString.! !WAComponent subclass: #EE650ProjectComponent	instanceVariableNames: 'showBackStates showTaskStates showWorkStates showCRCs'	classVariableNames: ''	package: 'EE650'!!EE650ProjectComponent methodsFor: 'testing' stamp: '4/20/2025 12:20'!canBeRoot    ^ true! !!EE650ProjectComponent methodsFor: 'rendering' stamp: '4/23/2025 13:03'!renderContentOn: html    "Style Block"    html tag: 'style' with: '        .storyCard {            background-color: #ffffcc;            border: 1px solid #ccc;            width: 600px;            margin: 20px auto;            font-family: sans-serif;            padding: 15px;            box-shadow: 3px 3px 8px #ccc;            border-radius: 6px;        }        .cardHeader {            display: flex;            justify-content: space-between;            align-items: center;            margin-bottom: 5px;        }        .cardLine {            border-top: 1px solid #444;            margin: 8px 0;        }        .cardLayout {            display: flex;            justify-content: space-between;            align-items: flex-start;            border-right: 1px solid #444;        }        .cardLeft {            width: 75%;            border-right: 1px solid #444;            padding-right: 10px;        }        .cardRight {            width: 25%;            text-align: right;            font-weight: bold;            color: #444;            padding-left: 10px;        }        .pph { margin-top: 5px; }        .logoutBtn {            margin: 10px auto;            width: 600px;            text-align: right;        }        .taskCard {            background-color: #cce5ff;            padding: 10px;            border: 1px solid #88b;            border-radius: 6px;            margin: 10px 20px;        }        .taskCardTitle {            font-weight: bold;            border-bottom: 1px solid #000;            margin-bottom: 6px;        }        .taskTable { width: 100%; display: table; }        .taskRow { display: table-row; }        .taskDesc, .taskAssignee {            display: table-cell;            padding: 5px;            vertical-align: top;        }        .taskDesc { width: 80%; }        .taskAssignee {            width: 20%;            text-align: right;            font-weight: bold;        }        .workCard {            background-color: white;            padding: 8px;            border: 1px solid #aaa;            border-radius: 6px;            margin: 10px 10px;        }        .crcSection {            margin-top: 40px;            padding: 15px;            width: 600px;            margin-left: auto;            margin-right: auto;        }        .crcCard {            background-color: #fff;            border: 1px solid #aaa;            padding: 12px;            margin-bottom: 15px;            border-radius: 4px;            font-family: sans-serif;        }        .crcHeader {            font-size: 14pt;            margin-bottom: 8px;            font-weight: bold;        }        .crcLayout {            display: flex;            border-top: 1px solid #444;            padding-top: 10px;            gap: 20px;        }        .crcLeft {            width: 50%;            border-right: 1px solid #aaa;            padding-right: 10px;        }        .crcRight {            width: 50%;            padding-left: 10px;        }        table.iterationTable {            border-collapse: collapse;            width: 90%;            margin: 20px auto;            font-family: sans-serif;        }        .iterationTable th, .iterationTable td {            border: 1px solid #666;            padding: 8px;            text-align: center;        }        .iterationTable th {            background-color: #ddd;        }    '.    "Logout Button"   html form: [    html submitButton        text: 'Logout';        callback: [ self answer ].].    html heading: 'EE650 XP Project – Story Cards'.    self showBackStates ifNil: [self showBackStates: Dictionary new].    self showTaskStates ifNil: [self showTaskStates: Dictionary new].    self showWorkStates ifNil: [self showWorkStates: Dictionary new].    MyXPProject storyCards do: [:card |        | showBack showTasks |        showBack := self showBackStates at: card number ifAbsentPut: [false].        showTasks := self showTaskStates at: card number ifAbsentPut: [false].        html form: [            html div class: 'storyCard'; with: [                html div class: 'cardHeader'; with: [                    html span with: [                        html submitButton                            callback: [self showBackStates at: card number put: showBack not];                            value: (showBack ifTrue: '⬅' ifFalse: '➡').                        html space.                        showBack ifFalse: [html strong: card title].                    ].                    showBack ifFalse: [                        html span with: ('Story ', card number asString)                    ].                ].                html div class: 'cardLine'.                html div class: 'cardLayout'; with: [                    html div class: 'cardLeft'; with: [                        showBack                            ifTrue: [                                html strong: 'Acceptance Criteria:'.                                html unorderedList: [                                    card acceptanceCriteria linesDo: [:line |                                        html listItem: line                                    ].                                ].                            ]                            ifFalse: [                                html div with: card role.                                html div with: card goal.                                html div with: card benefit.                            ].                    ].                    showBack ifFalse: [                        html div class: 'cardRight'; with: [                            html div class: 'pph'; with: ('PPH: ', card pph asString).                        ].                    ].                ].                (showBack not and: [showTasks]) ifTrue: [                    html submitButton                        callback: [self showTaskStates at: card number put: false];                        value: 'Hide Tasks ↑'                ] ifFalse: [                    showBack ifFalse: [                        html submitButton                            callback: [self showTaskStates at: card number put: true];                            value: 'Show Tasks ↓'                    ]                ].                (showBack not and: [showTasks]) ifTrue: [                    (MyXPProject taskCards select: [:t | t storyCard = card]) do: [:task |                        | showWork |                        showWork := self showWorkStates at: task taskId ifAbsentPut: [false].                        html div class: 'taskCard'; with: [                            html div class: 'taskCardTitle'; with: 'Task Card'.                            html div class: 'taskTable'; with: [                                html div class: 'taskRow'; with: [                                    html div class: 'taskDesc'; with: task description.                                    html div class: 'taskAssignee'; with: (task taskId, ' - ', task assignedTo).                                ].                            ].                            html submitButton                                callback: [self showWorkStates at: task taskId put: showWork not];                                value: (showWork ifTrue: ['Hide Work ↑'] ifFalse: ['Show Work ↓']).                            showWork ifTrue: [                                (MyXPProject workCards select: [:w | w taskCard = task]) do: [:work |                                    html div class: 'workCard'; with: [                                        html div class: 'taskTable'; with: [                                            html div class: 'taskRow'; with: [                                                html div class: 'taskDesc'; with: work progress.                                                html div class: 'taskAssignee'; with: (work workId, ' - ', work status).                                            ].                                        ].                                    ].                                ].                            ].                        ].                    ].                ].            ].        ].    ].    "CRC Cards Section"    html div class: 'crcSection'; with: [        html heading: 'CRC Cards'.        MyXPProject crcCards do: [:crc |            html div class: 'crcCard'; with: [                html div class: 'crcHeader'; with: crc className.                html div class: 'crcLayout'; with: [                    html div class: 'crcLeft'; with: [                        crc responsibilities do: [:r | html div: r ].                    ].                    html div class: 'crcRight'; with: [                        crc collaborators do: [:c | html div: c ].                    ].                ].            ].        ].    ].    "Iteration Cards Table Section"    html div class: 'crcSection'; with: [        html heading: 'Iteration Cards'.        html table class: 'iterationTable'; with: [            html tableRow: [                html tableHeading: [ html text: 'Iteration' ].                html tableHeading: [ html text: 'Planned Stories' ].                html tableHeading: [ html text: 'Planned Work (pph)' ].                html tableHeading: [ html text: 'Planned Developer Hours' ].                html tableHeading: [ html text: 'Planned Load Factor (wch)' ].                html tableHeading: [ html text: 'Actual Hours' ].                html tableHeading: [ html text: 'Actual Load Factor (wch)' ].                html tableHeading: [ html text: 'Retrospective Notes' ].            ].            MyXPProject iterationCards do: [:iter |                html tableRow: [                    html tableData: [ html text: iter number asString ].                    html tableData: [ html text: iter plannedStories ].                    html tableData: [ html text: iter plannedWork asString ].                    html tableData: [ html text: iter plannedHours asString ].                    html tableData: [ html text: iter plannedLoadFactor asString ].                    html tableData: [ html text: iter actualHours asString ].                    html tableData: [ html text: iter actualLoadFactor asString ].                    html tableData: [ html text: iter retrospective ].                ].            ].        ].    ].! !!EE650ProjectComponent methodsFor: 'showBackStates ' stamp: '4/20/2025 15:57'!initialize    super initialize.    showBackStates := Dictionary new.    showTaskStates := Dictionary new.    showWorkStates := Dictionary new.    showCRCs := false.! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:36'!showCRCs    ^ showCRCs.! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:36'!showCRCs: aBoolean    showCRCs := aBoolean.! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showBackStates    ^ showBackStates! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showBackStates: aDict    showBackStates := aDict! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showTaskStates    ^ showTaskStates! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showTaskStates: aDict    showTaskStates := aDict! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showWorkStates    ^ showWorkStates! !!EE650ProjectComponent methodsFor: 'accessing' stamp: '4/20/2025 15:54'!showWorkStates: aDict    showWorkStates := aDict! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EE650ProjectComponent class	instanceVariableNames: ''!!EE650ProjectComponent class methodsFor: 'configuring' stamp: '4/23/2025 11:49'!configure: aConfiguration    aConfiguration sessionClass: AuthSession.! !Object subclass: #IterationCard	instanceVariableNames: 'number plannedStories plannedWork plannedHours plannedLoadFactor actualHours actualLoadFactor retrospective'	classVariableNames: ''	package: 'EE650'!!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!number    ^ number.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!number: aNumber    number := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!plannedStories    ^ plannedStories.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!plannedStories: aString    plannedStories := aString.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!plannedWork    ^ plannedWork.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!plannedWork: aNumber    plannedWork := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:45'!plannedHours    ^ plannedHours.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!plannedHours: aNumber    plannedHours := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!plannedLoadFactor    ^ plannedLoadFactor.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!plannedLoadFactor: aNumber    plannedLoadFactor := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!actualHours    ^ actualHours.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!actualHours: aNumber    actualHours := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!actualLoadFactor    ^ actualLoadFactor.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!actualLoadFactor: aNumber    actualLoadFactor := aNumber.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:46'!retrospective    ^ retrospective.! !!IterationCard methodsFor: 'accessing' stamp: '4/21/2025 12:47'!retrospective: aString    retrospective := aString.! !Object subclass: #LoginAttempt	instanceVariableNames: 'username status'	classVariableNames: ''	package: 'EE650'!!LoginAttempt methodsFor: 'accessing' stamp: '4/21/2025 15:15'!username    ^ username! !!LoginAttempt methodsFor: 'accessing' stamp: '4/21/2025 15:15'!username: aString    username := aString.! !!LoginAttempt methodsFor: 'accessing' stamp: '4/21/2025 15:16'!status    ^ status! !!LoginAttempt methodsFor: 'accessing' stamp: '4/21/2025 15:16'!status: aString    status := aString.! !Object subclass: #StoryCard	instanceVariableNames: 'number title role goal benefit pph acceptanceCriteria'	classVariableNames: ''	package: 'EE650'!!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 10:59'!number    ^ number.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 10:59'!number: aNumber    number := aNumber.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 10:59'!title    ^ title.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!title: aString    title := aString.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!role    ^ role.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!role: aString    role := aString.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!goal    ^ goal.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!goal: aString    goal := aString.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:00'!benefit: aString    benefit := aString.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:01'!pph    ^ pph.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:02'!acceptanceCriteria    ^ acceptanceCriteria.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:02'!acceptanceCriteria: aString    acceptanceCriteria := aString.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 11:12'!pph: aNumber    pph := aNumber.! !!StoryCard methodsFor: 'accessing' stamp: '4/20/2025 12:34'!benefit    ^ benefit.! !Object subclass: #CRCCard	instanceVariableNames: 'className responsibilities collaborators'	classVariableNames: ''	package: 'EE650'!!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!className    ^ className.! !!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!className: aString    className := aString.! !!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!responsibilities    ^ responsibilities ifNil: [ responsibilities := OrderedCollection new ].! !!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!responsibilities: aCollection    responsibilities := aCollection.! !!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!collaborators    ^ collaborators ifNil: [ collaborators := OrderedCollection new ].! !!CRCCard methodsFor: 'introspection' stamp: '4/20/2025 11:06'!collaborators: aCollection    collaborators := aCollection.! !Object subclass: #TaskCard	instanceVariableNames: 'taskId description assignedTo storyCard status actualHours'	classVariableNames: ''	package: 'EE650'!!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:02'!taskId    ^ taskId.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:02'!taskId: aValue    taskId := aValue.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:02'!description    ^ description.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!description: aString    description := aString.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!assignedTo    ^ assignedTo.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!assignedTo: aString    assignedTo := aString.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!storyCard    ^ storyCard.! !!TaskCard methodsFor: 'accessing' stamp: '4/20/2025 11:03'!storyCard: aStoryCard    storyCard := aStoryCard.! !!TaskCard methodsFor: 'accessing'!status	^ status! !!TaskCard methodsFor: 'accessing'!status: arg1	status := arg1! !!TaskCard methodsFor: 'accessing'!actualHours   ^actualHours! !!TaskCard methodsFor: 'accessing'!actualHours: aNumber   actualHours := aNumber.! !LoginPageComponent initialize!