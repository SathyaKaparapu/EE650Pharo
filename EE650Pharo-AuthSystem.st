Object subclass: #UserManager	instanceVariableNames: 'users failedAttempts lockedAccounts otps'	classVariableNames: ''	package: 'EE650Pharo-AuthSystem'!!UserManager methodsFor: 'initialization' stamp: '4/7/2025 14:34'!initialize    super initialize.    users := Dictionary new.    failedAttempts := Dictionary new.    lockedAccounts := Set new.    otps := Dictionary new.! !!UserManager methodsFor: 'accessing' stamp: '3/31/2025 13:14'!users    ^ users! !!UserManager methodsFor: 'accessing' stamp: '3/31/2025 14:17'!addUser: aUsername password: aPassword    | hashedPassword |    hashedPassword := (SHA256 new hashMessage: aPassword) hex.    users at: aUsername put: hashedPassword! !!UserManager methodsFor: 'accessing' stamp: '3/31/2025 13:17'!getPasswordFor: aUsername    ^ users at: aUsername ifAbsent: [ nil ]! !!UserManager methodsFor: 'lockout' stamp: '3/31/2025 14:57'!incrementFailedAttemptsFor: aUsername    | attempts |    attempts := failedAttempts at: aUsername ifAbsent: [ 0 ].    attempts := attempts + 1.    failedAttempts at: aUsername put: attempts.    attempts >= 5 ifTrue: [ lockedAccounts add: aUsername ]! !!UserManager methodsFor: 'lockout' stamp: '3/31/2025 14:34'!isAccountLocked: aUsername    ^ lockedAccounts includes: aUsername! !!UserManager methodsFor: 'lockout' stamp: '3/31/2025 14:34'!resetFailedAttemptsFor: aUsername    failedAttempts removeKey: aUsername ifAbsent: [  ].    lockedAccounts remove: aUsername ifAbsent: [  ]! !!UserManager methodsFor: 'lockout' stamp: '3/31/2025 14:49'!failedAttempts    ^ failedAttempts! !!UserManager methodsFor: 'mfa' stamp: '4/7/2025 14:24'!clearOTPFor: aUsername    otps removeKey: aUsername ifAbsent: [  ]! !!UserManager methodsFor: 'mfa' stamp: '4/7/2025 14:28'!verifyOTP: anOTP for: aUsername    | storedOTP |    storedOTP := otps at: aUsername ifAbsent: [ nil ].    ^ storedOTP isNotNil and: [ storedOTP = anOTP ]! !!UserManager methodsFor: 'mfa' stamp: '4/7/2025 14:36'!generateOTPFor: aUsername    | otp random number |    random := Random new.    number := (100000 + (random next * 900000) truncated).    otp := number asString.    [ otp size < 6 ] whileTrue: [ otp := '0' , otp ].    otps at: aUsername put: otp.    ^ otp! !Object subclass: #AuthService	instanceVariableNames: 'userManager pendingMFA'	classVariableNames: ''	package: 'EE650Pharo-AuthSystem'!!AuthService methodsFor: 'initialization' stamp: '4/7/2025 14:42'!initialize    super initialize.    userManager := UserManager new.    pendingMFA := Set new.! !!AuthService methodsFor: 'accessing' stamp: '3/31/2025 13:19'!userManager    ^ userManager! !!AuthService methodsFor: 'accessing' stamp: '4/7/2025 14:44'!userManager: aUserManager    userManager := aUserManager! !!AuthService methodsFor: 'authentication' stamp: '4/7/2025 14:37'!loginWithUsername: aUsername password: aPassword    | storedPassword hashedInput |    (userManager isAccountLocked: aUsername) ifTrue: [ ^ false ].    storedPassword := userManager getPasswordFor: aUsername.    hashedInput := (SHA256 new hashMessage: aPassword) hex.    (storedPassword isNotNil and: [ storedPassword = hashedInput ])        ifTrue: [             userManager resetFailedAttemptsFor: aUsername.            pendingMFA add: aUsername.            ^ userManager generateOTPFor: aUsername        ]        ifFalse: [             userManager incrementFailedAttemptsFor: aUsername.            ^ false        ]! !!AuthService methodsFor: 'mfa' stamp: '4/7/2025 14:29'!verifyOTP: anOTP for: aUsername    | isValid |    isValid := userManager verifyOTP: anOTP for: aUsername.    isValid ifTrue: [         userManager clearOTPFor: aUsername.        pendingMFA remove: aUsername ifAbsent: [  ]    ].    ^ isValid! !!AuthService methodsFor: 'mfa' stamp: '4/7/2025 14:26'!clearOTPFor: aUsername    userManager clearOTPFor: aUsername.    pendingMFA remove: aUsername ifAbsent: [  ]! !